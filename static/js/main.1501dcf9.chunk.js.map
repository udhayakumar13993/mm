{"version":3,"sources":["components/Card/card.component.js","components/cardlist/CardList.js","components/searchBox/searchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","title","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGaA,G,kBAAK,SAACC,GAAD,OAEd,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,yCAAYN,EAAMI,QAAQG,cCJrBC,EAAS,SAACR,GAEnB,OADAS,QAAQC,IAAIV,GAGR,qBAAKC,UAAU,YAAf,SAA4BD,EAAMW,SAASC,KAAI,SAACR,GAAD,OAC3C,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCEhBQ,G,MAPE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aAC3B,OACD,uBAAOC,KAAK,SAASf,UAAU,SAC/Ba,YAAeA,EAAcG,SAAUF,MC+C5BG,E,kDA/Cf,aAAc,IAAD,8BAEX,gBAyBFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAxBpC,EAAKC,MAAM,CAETb,SAAS,GACTU,YAAY,GACZI,MAAM,IARG,E,gEAaO,IAAD,OAEjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKV,SAAS,CAACT,SAASmB,S,+BAa5B,IAAD,EACwBC,KAAKP,MAA5Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVW,EAAmBrB,EAASsB,QACjC,SAAA7B,GAAO,OAAEA,EAAQE,KAAK4B,cAAcC,SAASd,EAAYa,kBAE1D,OACE,sBAAKjC,UAAU,MAAf,UACA,0CACA,cAAC,EAAD,CACIa,YAAY,kBACZC,aAAcgB,KAAKhB,eACvB,cAAC,EAAD,CAAUJ,SAAWqB,W,GA1CTI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1501dcf9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nexport const Card=(props)=>(\r\n\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>Mail Id:{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport './cardlist.css'\r\n\r\nimport {Card} from '../Card/card.component'\r\nexport const CardList=(props)=>{\r\n    console.log(props)\r\n    return(\r\n\r\n        <div className=\"card-list\">{props.monsters.map((monster)=>\r\n            <Card key={monster.id} monster={monster}/>)  \r\n        }\r\n      </div>\r\n            )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport './searchBox.css';\r\n\r\n const SearchBox=({ placeholder,handleChange })=>{\r\n     return(\r\n    <input type='search' className=\"search\"\r\n    placeholder ={ placeholder } onChange={handleChange}/>\r\n     );\r\n}\r\n\r\nexport default SearchBox;","import React,{Component} from 'react'\r\n\r\nimport './App.css';\r\n \r\nimport {CardList} from './components/cardlist/CardList'\r\nimport SearchBox from './components/searchBox/searchBox'\r\nclass App extends Component{\r\nconstructor(){\r\n  // Extends the component constructor from React.Component Method\r\n  super();\r\n  //State for An App\r\n  this.state={\r\n\r\n    monsters:[],\r\n    searchField:'',\r\n    title:\"\"\r\n  }\r\n  //this.handleChange= this.handleChange.bind(this);\r\n}\r\n// Method to Mount the Data before calling the state in return\r\ncomponentDidMount(){\r\n\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n  .then(response=>response.json())\r\n  .then(users=>this.setState({monsters:users}))\r\n}\r\n//We need to bind this keyword before calling any function if it is an normal function\r\n\r\n//handleChange(e){\r\n\r\n  //this.setState({searchField:e.target.value});\r\n//}\r\n\r\n//No need to bind the handlechange function if it is an arrow function\r\nhandleChange=(e)=>{\r\n  this.setState({searchField:e.target.value});\r\n}\r\n  render(){\r\n    const {monsters,searchField}= this.state;\r\n    const filteredMonsters = monsters.filter(\r\n     monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()) \r\n    )\r\n    return (\r\n      <div className=\"App\">\r\n      <h1>Monsters</h1>\r\n      <SearchBox \r\n          placeholder=\"Search Monsters\" \r\n          handleChange={this.handleChange}/>\r\n      <CardList monsters ={filteredMonsters}>\r\n        </CardList>\r\n      </div>\r\n    ); }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}